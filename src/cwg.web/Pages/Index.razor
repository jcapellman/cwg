@page "/"

@using System;
@using cwg.web.Data;
@using cwg.web.Generators
@using cwg.web.Repositories
@using cwg.web.Services

@using Microsoft.AspNetCore.Mvc.Localization

@inject NavigationManager NavigationManager
@inject GeneratorsService GeneratorService
@inject GeneratorRepository Repository
@inject ClipboardService CService

@inject Microsoft.Extensions.Localization.IStringLocalizer<Index> Localizer

<section class="h-100">
    <header class="container h-100">
        <div class="d-flex align-items-center justify-content-center h-100">
            <div class="d-flex flex-column" style="background-color: #3e3e3e; padding: 20px; border-radius: 25px;">
                @if (_generators != null && _requestModel != null)
                {
                    <EditForm Model="_requestModel" OnValidSubmit="HandleValidSubmit">
                        <h2 style="color: cornflowerblue"><a @onclick="Refresh">@Localizer["FileGenerator"]</a></h2>

                        @if (_responseModel == null)
                        {
                            <div class="form-group">
                                <label for="fileType">@Localizer["SampleType"]</label>

                                <InputSelect id="fileType" name="fileType" class="form-control dark" style="max-width: 250px; margin: 0 auto; text-align: center" @bind-CurrentValueAsString="_requestModel.FileType" @bind-Value="FileType">
                                    @foreach (var generator in _generators)
                                            {
                                        <option value="@generator.Name">@generator.Name</option>
                                            }
                                </InputSelect>

                                <br />

                                <label for="numberToGenerate">@Localizer["QuantityToGenerate"]</label>
                                <InputNumber @bind-Value="_requestModel.NumberToGenerate" id="numberToGenerate" name="numberToGenerate" type="number" min="1" max="500" step="1" class="form-control" style="max-width: 200px; text-align: center; margin: 0 auto" />

                                <br />

                                <label for="ThreatLevel">@Localizer["ThreatLevel"]</label>
                                <InputSelect id="ThreatLevel" name="ThreatLevel" class="form-control dark" style="max-width: 200px; margin: 0 auto; text-align: center" @bind-CurrentValueAsString="_requestModel.ThreatLevel" @bind-Value="_requestModel.ThreatLevel">
                                    @foreach (var level in _requestModel.SelectableThreatLevels)
                                            {
                                        <option value="@level">@level</option>
                                            }
                                </InputSelect>
                            </div>

                            <div class="form-group">
                                <button type="submit" class="btn-lg btn-primary">@Localizer["GenerateSamples"]</button>
                            </div>
                        }

                        @if (_responseModel != null)
                        {
                            <h5>@Localizer["Generated"] @_responseModel.FileType @Localizer["File"]</h5>
                            <span style="font-size: x-small">SHA1:</span> <span style="font-size: small">@_responseModel.SHA1</span><br /><br />

                            <a href="/file/@_responseModel.FileName" target="_blank" role="button" class="btn btn-info btn-lg">@Localizer["DownloadFile"]</a><br /><br />

                            <div>
                                Download URL:
                                <p style="box-shadow: 1px 1px 5px #555 inset;">
                                    @_responseModel.FullPath
                                </p>

                                <button type="button" class="btn btn-outline-primary" @onclick="CopyTextToClipboard">
                                    Copy to Clipboard
                                    <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-clipboard" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                                        <path fill-rule="evenodd" d="M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z"></path>
                                        <path fill-rule="evenodd" d="M9.5 1h-3a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h3a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3z"></path>
                                    </svg>
                                </button>
                            </div>

                            <br />

                            <button @onclick="GenerateOneMore" class="btn btn-success">@Localizer["GenerateOneMore"]</button><br /><br />

                            <button @onclick="Refresh" class="btn btn-warning">@Localizer["GoHome"] | @Localizer["ResetGenerator"]</button>
                        }
                    </EditForm>
                }

                <p style="margin-top: 20px;font-size:x-small">
                    @Localizer["CreatedBy"] <a href="http://www.jarredcapellman.com" target="_blank">Jarred Capellman</a> | <a href="https://github.com/jcapellman/cwg" target="_blank">@Localizer["SourceCode"]</a><br />
                    Version 2024.05.0
                </p>
            </div>
        </div>
    </header>
</section>

@functions
{
    protected void GenerateOneMore()
    {
        HandleValidSubmit();
    }

    protected void Refresh()
    {
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }
}

@code {
    private GenerationResponseModel _responseModel = null;

    private GenerationRequestModel _requestModel = new GenerationRequestModel();

    private void HandleValidSubmit()
    {
        _responseModel = GeneratorService.GenerateFile(_requestModel);

        _responseModel.FullPath = $"{NavigationManager.BaseUri}file/{_responseModel.FileName}";
    }

    private IEnumerable<BaseGenerator> _generators;

    public bool PackDisable;

    public string FileType
    {
        get => _requestModel.FileType;

        set
        {
            _requestModel.FileType = value;

            var selectedGenerator = _generators.FirstOrDefault(a => a.Name == value);

            PackDisable = !selectedGenerator.Packable;
        }
    }

    protected override void OnInitialized()
    {
        _generators = GeneratorRepository.GetGenerators();

        _requestModel = new GenerationRequestModel();

        _requestModel.FileType = _generators.FirstOrDefault().Name;
    }

    private async Task CopyTextToClipboard()
    {
        await CService.WriteTextAsync(_responseModel.FullPath);
    }
}
